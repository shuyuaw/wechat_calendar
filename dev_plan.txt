我们现在基于之前的设计文档，为这个“教练课时预约”小程序（自建后端版本）制定一个详细的开发流程和计划。

**前提假设：**

* **开发者：** 1 位
* **开发周期目标：** 尽量在一周内完成核心功能，可根据实际情况微调。
* **技术栈：** 微信小程序原生前端 + Node.js/Express 后端 + SQLite/MongoDB 数据库 (请在开始前确定数据库选型)。
* **环境：** 本地 Windows 用于后端部署和数据库运行。

**所需工具/环境准备：**

1.  **微信开发者工具：** 用于小程序前端开发、调试、预览、上传。
2.  **Node.js 环境：** 安装最新 LTS 版本。
3.  **数据库：** 安装选定的数据库 (MongoDB Community Server 或 SQLite 工具)。
4.  **代码编辑器：** 如 VS Code。
5.  **API 测试工具：** 如 Postman 或 Insomnia。
6.  **版本控制：** Git (强烈建议使用，即使是单人项目)。
7.  **微信公众平台：** 注册小程序账号，获取 AppID，配置服务器域名（指向你的 Windows 公网 IP/DDNS 域名），申请并配置模板消息 ID。

**开发流程与模块顺序：**

建议采用“后端优先，核心功能驱动”的顺序，因为前端很多功能依赖后端 API。

**阶段一：项目初始化与后端基础建设 (预计 Day 1)**

1.  **项目结构搭建：**
    * 创建后端项目文件夹，初始化 Node.js 项目 (`npm init`)，安装 Express 及基础依赖 (`cors`, `dotenv` 等)。
    * 创建小程序项目文件夹，在微信开发者工具中创建小程序项目。
    * 初始化 Git 仓库。
2.  **数据库配置与模型定义：**
    * 安装数据库驱动 (`pg` for PostgreSQL, `mysql2` for MySQL, `mongodb` for MongoDB, `sqlite3` for SQLite)。
    * 根据设计文档，编写数据库模型/Schema (定义 `CoachConfig`, `AvailabilitySlots`, `Bookings`, `Users` 的结构)。
    * 编写数据库连接和初始化逻辑。
3.  **后端基础 API 服务器：**
    * 搭建基础 Express 服务器，设置端口监听，配置 CORS 允许小程序访问。
    * 实现基础的日志记录功能。
    * 实现用户登录 API (`/api/login`)：接收小程序 `wx.login` 的 code，调用微信接口换取 OpenID，（可选）生成 Session 或 Token 返回给前端。
4.  **测试 (后端)：**
    * 使用 Postman/Insomnia 测试 `/api/login` 接口是否能正常工作。
    * 检查数据库连接是否成功，模型是否能正确初始化。

**阶段二：核心后端 API 开发 (预计 Day 2-3)**

1.  **教练配置模块 (后端)：**
    * API: `GET /api/coach/config`, `PUT /api/coach/config`。
    * 实现读取和更新 `CoachConfig` 的逻辑。
    * 实现更新配置后，根据 `weeklyTemplate` 重新生成 `AvailabilitySlots` 的核心逻辑。
    * **测试 (后端)：** Postman 调用 `PUT` 接口更新配置，检查 `CoachConfig` 和 `AvailabilitySlots` 表数据是否按预期生成/更新。调用 `GET` 接口验证读取。
2.  **可用时段查询模块 (后端)：**
    * API: `GET /api/slots`, `GET /api/slots/week`。
    * 实现根据日期或周范围查询 `AvailabilitySlots` 的逻辑。
    * **测试 (后端)：** Postman 调用接口，传入不同日期/范围，验证返回的数据是否正确、完整。
3.  **预约与取消模块 (后端)：**
    * API: `POST /api/bookings`, `DELETE /api/bookings/:bookingId`。
    * 实现创建预约的核心逻辑，包括**并发控制**（原子更新 `AvailabilitySlots` 状态）。
    * 实现取消预约的逻辑（更新 `Bookings` 和 `AvailabilitySlots` 状态）。
    * API: `GET /api/bookings/mine/upcoming`, `GET /api/coach/bookings`。
    * 实现查询用户或教练预约列表的逻辑。
    * **测试 (后端)：**
        * Postman 模拟学员 A 预约某个 slot，成功。
        * Postman 模拟学员 B **同时**预约同一个 slot，失败（返回 409 Conflict）。
        * 检查数据库状态是否正确。
        * Postman 模拟学员 A 取消预约，检查数据库状态是否回滚。
        * Postman 测试查询接口。

**阶段三：核心前端页面与联调 (预计 Day 3-4)**

1.  **前端基础与登录：**
    * 搭建小程序基础结构（tabBar 如果需要，全局样式，API 请求封装）。
    * 实现小程序启动时的自动登录流程（调用 `wx.login` -> 后端 `/api/login` -> 存储用户信息/Token）。
2.  **学员端 - 查看与预约：**
    * 开发日历视图/列表视图页面。
    * 调用后端 `/api/slots` 或 `/api/slots/week` 获取并展示可用时间段。
    * 实现点击时间段进行预约的交互，调用后端 `/api/bookings`。处理成功和失败（如已被预约）的界面反馈。
    * **测试 (联调)：** 在开发者工具中模拟学员操作，查看能否正确显示可用时间，能否成功预约，能否正确处理已被预约的情况。检查后端日志和数据库。
3.  **学员端 - 我的预约：**
    * 开发“我的预约”页面。
    * 调用后端 `/api/bookings/mine/upcoming` 获取并展示待上课列表。
    * 实现“取消预约”按钮功能，调用后端 `/api/bookings/:bookingId`。
    * **测试 (联调)：** 预约课程后，在此页面查看是否显示。点击取消，查看是否成功，列表是否更新。检查后端和数据库。

**阶段四：教练端功能与通知系统 (预计 Day 5)**

1.  **教练端 - 配置管理：**
    * 开发仅教练可访问的配置页面（需要前端路由或逻辑判断用户身份）。
    * 实现读取 `/api/coach/config` 展示当前配置。
    * 实现界面让教练修改 `weeklyTemplate` 和 `sessionDurationMinutes`，调用 `/api/coach/config` 更新。
    * **测试 (联调)：** 模拟教练登录，修改配置，然后切换到学员视角查看可用时间是否按新配置更新。
2.  **教练端 - 查看预约：**
    * 开发教练查看预约的页面。
    * 调用 `/api/coach/bookings` 按日期查询预约。
    * （可选）实现教练取消任意预约的功能。
    * **测试 (联调)：** 学员预约后，模拟教练登录查看该日预约列表是否正确显示。
3.  **通知系统（后端）：**
    * 配置后台**定时任务**（如使用 `node-schedule`），定期检查未来 15 分钟内开始的预约。
    * 实现调用微信 `subscribeMessage.send` 发送模板消息的逻辑（包括获取 `accessToken`）。
    * 在 `createBooking` 和 `cancelBooking` 成功后，也触发对应的模板消息发送。
    * **测试 (后端)：** 单元测试定时任务逻辑。手动触发预约/取消，检查后端日志看是否尝试发送通知。
4.  **通知系统（前端）：**
    * 在用户进行首次预约或特定操作时，调用 `wx.requestSubscribeMessage` 请求用户授权接收模板消息。
    * （可选）调用后端 API (`/api/users/subscribe`) 告知后端用户已授权。
    * **测试 (联调 & 微信后台)：**
        * 确保微信公众平台已配置好模板消息 ID。
        * 前端操作触发订阅请求。
        * 后端触发发送后，在手机微信上查看是否能收到模板消息。（需要真机预览/调试）

**阶段五：整合测试、优化与部署准备 (预计 Day 6-7)**

1.  **端到端测试：**
    * 模拟完整流程：教练设置时间 -> 学员 A 预约 -> 教练查看预约 -> 学员 B 尝试预约同一时间失败 -> 学员 A 收到提醒 -> 学员 A 取消预约 -> 教练收到取消通知。
    * 在不同手机（Android, iOS）上进行测试。
2.  **UI/UX 优化：**
    * 根据测试反馈，优化界面显示和交互流程。
    * 添加必要的加载提示、错误提示。
3.  **代码审查与优化：**
    * 检查代码规范、注释。
    * 优化性能（如数据库查询）。
    * 完善日志记录。
4.  **部署准备 (本地 Windows)：**
    * 确保后端服务能稳定运行（可能需要使用 `pm2` 或类似工具守护 Node.js 进程）。
    * 配置数据库备份策略（如果需要）。
    * 配置 Windows 防火墙，允许外部访问后端服务端口。
    * 配置 DDNS 或获取固定公网 IP，并在微信公众平台配置为服务器域名。
    * **测试 (部署)：** 小程序前端配置好生产环境的后端 API 地址，真机测试能否通过公网访问本地后端服务并完成所有功能。

**里程碑：**

* **M1 (Day 1 结束):** 后端项目可运行，数据库连接成功，用户登录 API 可用。
* **M2 (Day 3 结束):** 后端核心 API (配置、查时段、预约、取消、查预约) 开发完成并通过 Postman 测试。
* **M3 (Day 4 结束):** 学员端核心功能 (查时段、预约、查我的、取消) 前后端联调通过。
* **M4 (Day 5 结束):** 教练端功能、通知系统（后端逻辑+前端订阅）开发完成。
* **M5 (Day 7 结束):** 完成端到端测试、优化、本地部署准备，达到可上线状态。

**注意事项：**

* **版本控制：** 频繁提交代码到 Git，记录每次更改。
* **配置管理：** 将敏感配置（如数据库密码、微信 AppSecret）使用环境变量 (`.env` 文件) 管理，不要硬编码。
* **本地部署风险：** 再次强调本地 Windows 部署的风险和维护成本，确保开发者和使用者都了解这一点。
* **时间估算：** 以上时间为理想估算，实际可能因遇到问题而延长，保持灵活性。